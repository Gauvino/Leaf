From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Tue, 13 Aug 2024 03:49:35 +0800
Subject: [PATCH] Revert to fix for rv


diff --git a/src/main/java/net/minecraft/world/Container.java b/src/main/java/net/minecraft/world/Container.java
index 70e6711c11361dae6d1f3b70582efe78f4bd7c07..bd31beb514bf7607eeefebf3c027264b2c6949ab 100644
--- a/src/main/java/net/minecraft/world/Container.java
+++ b/src/main/java/net/minecraft/world/Container.java
@@ -130,20 +130,6 @@ public interface Container extends Clearable {
         });
     }
 
-    // Gale start - optimize villager data storage
-    default boolean hasAnyOf(Item[] items) {
-        for (int i = 0; i < this.getContainerSize(); ++i) {
-            ItemStack itemstack = this.getItem(i);
-            for (Item item : items) {
-                if (itemstack.is(item)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-    // Gale end - optimize villager data storage
-
     default boolean hasAnyMatching(Predicate<ItemStack> predicate) {
         for (int i = 0; i < this.getContainerSize(); ++i) {
             ItemStack itemstack = this.getItem(i);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/TradeWithVillager.java b/src/main/java/net/minecraft/world/entity/ai/behavior/TradeWithVillager.java
index f8871bfc0dae0485b965ee41b770da78cc4c7480..d6717039407a4b77c07efcdaab486567265d3d6b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/TradeWithVillager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/TradeWithVillager.java
@@ -3,6 +3,10 @@ package net.minecraft.world.entity.ai.behavior;
 import com.google.common.collect.ImmutableMap;
 
 import java.util.Arrays;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.entity.EntityType;
@@ -18,11 +22,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public class TradeWithVillager extends Behavior<Villager> {
-    // Gale start - optimize villager data storage
-    private static final Item[] WHEAT_SINGLETON_ARRAY = {Items.WHEAT};
-    private @NotNull Item @Nullable [] trades = null;
-    // Gale end - optimize villager data storage
-    private static final Item[] NETHER_WART_SINGLETON_ARRAY = {Items.NETHER_WART}; // Leaf - sync with Gale's Optimize-villager-data-storage.patch
+    private Set<Item> trades = ImmutableSet.of();
 
     public TradeWithVillager() {
         super(
@@ -56,24 +56,22 @@ public class TradeWithVillager extends Behavior<Villager> {
             BehaviorUtils.lockGazeAndWalkToEachOther(entity, villager, 0.5F, 2);
             entity.gossip(world, villager, time);
             if (entity.hasExcessFood() && (entity.getVillagerData().getProfession() == VillagerProfession.FARMER || villager.wantsMoreFood())) {
-                throwHalfStack(entity, Villager.FOOD_POINTS_KEY_ARRAY, villager); // Gale - optimize villager data storage
+                throwHalfStack(entity, Villager.FOOD_POINTS.keySet(), villager);
             }
 
             if (villager.getVillagerData().getProfession() == VillagerProfession.FARMER
                 && entity.getInventory().countItem(Items.WHEAT) > Items.WHEAT.getDefaultMaxStackSize() / 2) {
-                throwHalfStack(entity, Villager.FOOD_POINTS_KEY_ARRAY, villager); // Gale - optimize villager data storage
+                throwHalfStack(entity, ImmutableSet.of(Items.WHEAT), villager);
             }
 
             // Purpur start
             if (world.purpurConfig.villagerClericsFarmWarts && world.purpurConfig.villagerClericFarmersThrowWarts && entity.getVillagerData().getProfession() == VillagerProfession.CLERIC && entity.getInventory().countItem(Items.NETHER_WART) > Items.NETHER_WART.getDefaultMaxStackSize() / 2) {
-                throwHalfStack(entity, NETHER_WART_SINGLETON_ARRAY, villager); // Leaf - sync with Gale's Optimize-villager-data-storage.patch
+                throwHalfStack(entity, ImmutableSet.of(Items.NETHER_WART), villager);
             }
             // Purpur end
 
-            // Gale start - optimize villager data storage
-            if (this.trades != null && entity.getInventory().hasAnyOf(this.trades)) {
+            if (!this.trades.isEmpty() && entity.getInventory().hasAnyOf(this.trades)) {
                 throwHalfStack(entity, this.trades, villager);
-                // Gale end - optimize villager data storage
             }
         }
     }
@@ -83,36 +81,13 @@ public class TradeWithVillager extends Behavior<Villager> {
         villager.getBrain().eraseMemory(MemoryModuleType.INTERACTION_TARGET);
     }
 
-    // Gale start - optimize villager data storage
-    private static @NotNull Item @Nullable [] figureOutWhatIAmWillingToTrade(Villager entity, Villager target) {
-        @NotNull Item @Nullable [] immutableSet = target.getVillagerData().getProfession().requestedItems();
-        if (immutableSet == null) {
-            return null;
-        }
-        @NotNull Item @Nullable [] immutableSet2 = entity.getVillagerData().getProfession().requestedItems();
-        if (immutableSet2 == null) {
-            return immutableSet;
-        }
-        if (immutableSet == immutableSet2) {
-            return null;
-        }
-        Item[] willingToTrade = new Item[immutableSet.length];
-        int willingToTradeSize = 0;
-        forImmutableSet:
-        for (Item item : immutableSet) {
-            for (Item item2 : immutableSet2) {
-                if (item == item2) {
-                    continue forImmutableSet;
-                }
-            }
-            willingToTrade[willingToTradeSize] = item;
-            willingToTradeSize++;
-        }
-        return Arrays.copyOf(willingToTrade, willingToTradeSize);
-        // Gale end - optimize villager data storage
+    private static Set<Item> figureOutWhatIAmWillingToTrade(Villager entity, Villager target) {
+        ImmutableSet<Item> immutableSet = target.getVillagerData().getProfession().requestedItems();
+        ImmutableSet<Item> immutableSet2 = entity.getVillagerData().getProfession().requestedItems();
+        return immutableSet.stream().filter(item -> !immutableSet2.contains(item)).collect(Collectors.toSet());
     }
 
-    private static void throwHalfStack(Villager villager, @NotNull Item @NotNull [] validItems, LivingEntity target) { // Gale - optimize villager data storage
+    private static void throwHalfStack(Villager villager, Set<Item> validItems, LivingEntity target) {
         SimpleContainer simpleContainer = villager.getInventory();
         ItemStack itemStack = ItemStack.EMPTY;
         int i = 0;
@@ -125,16 +100,7 @@ public class TradeWithVillager extends Behavior<Villager> {
                 itemStack2 = simpleContainer.getItem(i);
                 if (!itemStack2.isEmpty()) {
                     item = itemStack2.getItem();
-                    // Gale start - optimize villager data storage
-                    boolean inValidItems = false;
-                    for (Item validItem : validItems) {
-                        if (validItem == item) {
-                            inValidItems = true;
-                            break;
-                        }
-                    }
-                    if (inValidItems) {
-                        // Gale end - optimize villager data storage
+                    if (validItems.contains(item)) {
                         if (itemStack2.getCount() > itemStack2.getMaxStackSize() / 2) {
                             j = itemStack2.getCount() / 2;
                             break label28;
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
index f80af9174e33a2407d12f37575464a2790302cfe..1a496dd1b420ebc4fb00e10ad542655fd077a27d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
@@ -4,6 +4,7 @@ import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
@@ -28,7 +29,7 @@ public class SecondaryPoiSensor extends Sensor<Villager> {
         // Gale start - Lithium - skip secondary POI sensor if absent
         var secondaryPoi = entity.getVillagerData().getProfession().secondaryPoi();
         Brain<?> brain = entity.getBrain();
-        if (secondaryPoi == null || (!world.purpurConfig.villagerClericsFarmWarts && entity.getVillagerData().getProfession() == net.minecraft.world.entity.npc.VillagerProfession.CLERIC)) {
+        if (secondaryPoi.isEmpty() || (!world.purpurConfig.villagerClericsFarmWarts && entity.getVillagerData().getProfession() == net.minecraft.world.entity.npc.VillagerProfession.CLERIC)) {
             brain.eraseMemory(MemoryModuleType.SECONDARY_JOB_SITE);
             return;
         }
@@ -36,19 +37,14 @@ public class SecondaryPoiSensor extends Sensor<Villager> {
         // Purpur end
         ResourceKey<Level> resourceKey = world.dimension();
         BlockPos blockPos = entity.blockPosition();
-        @Nullable ArrayList<GlobalPos> list = null; // Gale - optimize villager data storage
+        List<GlobalPos> list = Lists.newArrayList();
         int i = 4;
 
         for (int j = -4; j <= 4; j++) {
             for (int k = -2; k <= 2; k++) {
                 for (int l = -4; l <= 4; l++) {
                     BlockPos blockPos2 = blockPos.offset(j, k, l);
-                    // Gale start - optimize villager data storage
-                    if (secondaryPoi == world.getBlockState(blockPos2).getBlock()) {
-                        if (list == null) {
-                            list = Lists.newArrayList();
-                        }
-                        // Gale end - optimize villager data storage
+                    if (entity.getVillagerData().getProfession().secondaryPoi().contains(world.getBlockState(blockPos2).getBlock())) {
                         list.add(GlobalPos.of(resourceKey, blockPos2));
                     }
                 }
@@ -56,10 +52,7 @@ public class SecondaryPoiSensor extends Sensor<Villager> {
         }
 
         //Brain<?> brain = entity.getBrain(); // Purpur - moved up
-        // Gale start - optimize villager data storage
-        if (list != null) {
-            list.trimToSize();
-            // Gale end - optimize villager data storage
+        if (!list.isEmpty()) {
             brain.setMemory(MemoryModuleType.SECONDARY_JOB_SITE, list);
         } else {
             brain.eraseMemory(MemoryModuleType.SECONDARY_JOB_SITE);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index a6ba083b39c95dfbbd15e668032350fcb02cd256..9c886ddced84c248c6c571ca32631b40376cf521 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -107,9 +107,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
     public static final int BREEDING_FOOD_THRESHOLD = 12;
     public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
-    public static final Item[] FOOD_POINTS_KEY_ARRAY = FOOD_POINTS.keySet().toArray(Item[]::new); // Gale - optimize villager data storage
     private static final int TRADES_PER_LEVEL = 2;
-    private static final Item[] WANTED_ITEMS = {Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, Items.BEETROOT_SEEDS, Items.TORCHFLOWER_SEEDS, Items.PITCHER_POD}; // Gale - optimize villager data storage
+    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS, Items.TORCHFLOWER_SEEDS, Items.PITCHER_POD});
     private static final int MAX_GOSSIP_TOPICS = 10;
     private static final int GOSSIP_COOLDOWN = 1200;
     private static final int GOSSIP_DECAY_INTERVAL = 24000;
@@ -1017,28 +1016,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     public boolean wantsToPickUp(ItemStack stack) {
         Item item = stack.getItem();
 
-        // Gale start - optimize villager data storage
-        boolean isDesired = false;
-        for (Item wantedItem : WANTED_ITEMS) {
-            if (wantedItem == item) {
-                isDesired = true;
-                break;
-            }
-        }
-        if (!isDesired) {
-            var requestedItems = this.getVillagerData().getProfession().requestedItems();
-            if (requestedItems == null) {
-                return false;
-            }
-            for (Item requestedItem : requestedItems) {
-                if (requestedItem == item) {
-                    isDesired = true;
-                    break;
-                }
-            }
-        }
-        return isDesired && this.getInventory().canAddItem(stack);
-        // Gale end - optimize villager data storage
+        return (Villager.WANTED_ITEMS.contains(item) || this.getVillagerData().getProfession().requestedItems().contains(item)) && this.getInventory().canAddItem(stack);
     }
 
     public boolean hasExcessFood() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
index 482a0998a3d98ba145f33efdba5989714a931cf5..77fdca3a2b277f0b4ad22303aceab63a8a90d4a1 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerProfession.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.entity.npc;
 
 import java.util.function.Predicate;
+
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -22,8 +24,8 @@ public record VillagerProfession(
     String name,
     Predicate<Holder<PoiType>> heldJobSite,
     Predicate<Holder<PoiType>> acquirableJobSite,
-    @NotNull Item @Nullable [] requestedItems, // Gale - optimize villager data storage
-    @Nullable Block secondaryPoi, // Gale - optimize villager data storage
+    ImmutableSet<Item> requestedItems,
+    ImmutableSet<Block> secondaryPoi,
     @Nullable SoundEvent workSound
 ) {
     public static final Predicate<Holder<PoiType>> ALL_ACQUIRABLE_JOBS = poiType -> poiType.is(PoiTypeTags.ACQUIRABLE_JOB_SITE);
@@ -31,12 +33,12 @@ public record VillagerProfession(
     public static final VillagerProfession ARMORER = register("armorer", PoiTypes.ARMORER, SoundEvents.VILLAGER_WORK_ARMORER);
     public static final VillagerProfession BUTCHER = register("butcher", PoiTypes.BUTCHER, SoundEvents.VILLAGER_WORK_BUTCHER);
     public static final VillagerProfession CARTOGRAPHER = register("cartographer", PoiTypes.CARTOGRAPHER, SoundEvents.VILLAGER_WORK_CARTOGRAPHER);
-    public static final VillagerProfession CLERIC = register("cleric", PoiTypes.CLERIC, new Item[] {Items.NETHER_WART}, Blocks.SOUL_SAND, SoundEvents.VILLAGER_WORK_CLERIC); // Purpur // Leaf - sync with Gale's Optimize-villager-data-storage.patch
+    public static final VillagerProfession CLERIC = register("cleric", PoiTypes.CLERIC, ImmutableSet.of(Items.NETHER_WART), ImmutableSet.of(Blocks.SOUL_SAND), SoundEvents.VILLAGER_WORK_CLERIC); // Purpur
     public static final VillagerProfession FARMER = register(
         "farmer",
         PoiTypes.FARMER,
-        new Item[] {Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT_SEEDS, Items.BONE_MEAL}, // Gale - optimize villager data storage
-        Blocks.FARMLAND, // Gale - optimize villager data storage
+        ImmutableSet.of(Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT_SEEDS, Items.BONE_MEAL),
+        ImmutableSet.of(Blocks.FARMLAND),
         SoundEvents.VILLAGER_WORK_FARMER
     );
     public static final VillagerProfession FISHERMAN = register("fisherman", PoiTypes.FISHERMAN, SoundEvents.VILLAGER_WORK_FISHERMAN);
@@ -58,36 +60,34 @@ public record VillagerProfession(
         return register(id, entry -> entry.is(heldWorkstation), entry -> entry.is(heldWorkstation), workSound);
     }
 
-    // Gale start - optimize villager data storage
     private static VillagerProfession register(
         String id, Predicate<Holder<PoiType>> heldWorkstation, Predicate<Holder<PoiType>> acquirableWorkstation, @Nullable SoundEvent workSound
     ) {
-        return register(id, heldWorkstation, acquirableWorkstation, null, null, workSound);
+        return register(id, heldWorkstation, acquirableWorkstation, ImmutableSet.of(), ImmutableSet.of(), workSound);
     }
 
     private static VillagerProfession register(
         String id,
         ResourceKey<PoiType> heldWorkstation,
-        @NotNull Item @Nullable [] gatherableItems,
-        @Nullable Block secondaryJobSite,
+        ImmutableSet<Item> gatherableItems,
+        ImmutableSet<Block> secondaryJobSites,
         @Nullable SoundEvent workSound
     ) {
-        return register(id, entry -> entry.is(heldWorkstation), entry -> entry.is(heldWorkstation), gatherableItems, secondaryJobSite, workSound);
+        return register(id, entry -> entry.is(heldWorkstation), entry -> entry.is(heldWorkstation), gatherableItems, secondaryJobSites, workSound);
     }
 
     private static VillagerProfession register(
         String id,
         Predicate<Holder<PoiType>> heldWorkstation,
         Predicate<Holder<PoiType>> acquirableWorkstation,
-        @NotNull Item @Nullable [] gatherableItems,
-        @Nullable Block secondaryJobSite,
+        ImmutableSet<Item> gatherableItems,
+        ImmutableSet<Block> secondaryJobSites,
         @Nullable SoundEvent workSound
     ) {
         return Registry.register(
             BuiltInRegistries.VILLAGER_PROFESSION,
             ResourceLocation.withDefaultNamespace(id),
-            new VillagerProfession(id, heldWorkstation, acquirableWorkstation, gatherableItems != null && gatherableItems.length == 0 ? null : gatherableItems, secondaryJobSite, workSound)
+                new VillagerProfession(id, heldWorkstation, acquirableWorkstation, gatherableItems, secondaryJobSites, workSound)
         );
-        // Gale end - optimize villager data storage
     }
 }
